# ######################################################################################
# BASH SCRIPT TEMPLATE
#   HISTORY:
#		${version_date}		Script initially created
#
# ######################################################################################

#   VERSION
version="0.0.1"

script_finish() {

	# DESC: Trap exits with cleanup function
	# ARGS: exit code -> trap <script_finish> EXIT INT TERM
	# OUTS: None (so far)
	# INFO: ERROR_CODE is put in local var, b/c otherwise one gets the return code
	#       of the most recently completed command
	#       (and i dont care for knowing "echo" ran successfully...)
	# INFO: sourcing this DOES NOT WORK!
	#       any assigned return codes will be overwritten by the "sourcing" retrun code,
	#       so this is useless!!!

	local ERROR_CODE="$?"
	if [[ "${ERROR_CODE}" == 0 ]]; then
		print GREEN "exit green, no errors"
	elif [[ "${ERROR_CODE}" == 20 ]]; then
		print RED "name check: ${name} contains disallowed characters!"
		print "\tallowed characters: [a-zA-Z0-9_-.]"
		print LINE
	elif [[ "${ERROR_CODE}" == 5 ]]; then
		print YELLOW "no script created, exiting"
		print LINE
	elif [[ "${ERROR_CODE}" == 6 ]]; then
		print YELLOW "Invalid name choice, exiting"
		print LINE
	elif [[ "${ERROR_CODE}" != 0 ]]; then
		print GREEN "all OK"
	else
		echo "somesin"
	fi
}

###### "init" element #####

##### variables ###

quiet=0
verbose=0
force=0
strict=0
debug=0

##### functions ###

flags_init() {

	# DESC: debugging options
	# ARGS: Flags debug, strict set
	# OUTS: debugging info
	# INFO: is called right away

	local quiet=${quiet}
	local verbose=${verbose}
	local force=${force}
	local strict=${strict}
	local debug=${debug}

	# enforce running in debug mode
	# one `COULD` build a unset -x functionality also...
	if [[ "${debug}" == "1" ]]; then
		set -x
	fi
	# Exit on empty variable
	if [[ "${strict}" == "1" ]]; then
		set -o nounset
	fi

	# Bash will remember & return the highest exitcode in a chain of pipes.
	# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
	set -o pipefail

	# Exit on error. Append '||true' when you run the script if you expect an error.
	set -o errexit

	if [[ "${verbose}" == "1" ]]; then
		echo -e "
        Flag settings:
        quiet   =${quiet}
        verbose =${verbose}
        force   =${force}
        strict  =${strict}
        debug   =${debug}"
	fi
}

color_init() {

	# DESC: Initialise colour variables
	# ARGS: None
	# OUTS: Read-only variables with ANSI control codes
	# NOTE: If --no-colour was set the variables will be empty

	readonly RED='\033[0;31m'
	readonly YELLOW='\e[33m'
	readonly NOC='\033[0m'
	readonly BLUE='\e[34m'
	readonly GREEN='\e[0;32m'
}

script_init() {

	# DESC: Generic script initialisation
	# ARGS: $@ (optional): Arguments provided to the script
	# OUTS: $exec_path: The current working directory when the script was run
	#       $script_path: The full path to the script
	#       $script_dir: The directory path of the script
	#       $script_name: The file name of the script

	# additional explainer:
	# ${BASH_SOURCE[0]} (or, more simply, $BASH_SOURCE[1] ) contains the (potentially relative) path
	# of the containing script in all invocation scenarios, notably also when the script is sourced,
	# which is not true for $0.
	# integrate ${BASH_SOURCE[1]%/*}

	local exec_path="$PWD"
	readonly script_path="${BASH_SOURCE[1]}"
	readonly script_dir="$(dirname "$script_path")"
	readonly script_name="$(basename "$script_path")"
	readonly script_params="$*"
}

print() {

	# DESC: pretty print text, lines 
	# ARGS: 1 -> Color, line
	#		choices are:
	#			RED
	#			YELLOW
	#			BLUE
	#			GREEN
	#			NOC (no color)
	#			LINE
	#
	# ARGS: 2 -> Text, line element
	# OUTS: colorised text, (non-colorised) line
	# LIMITS:
	#		cannot take formatters (newline,tabs,etc...)
	# EXAMPLE:
	#		print RED "text to be printed red"
	#		print "text to be printed without color"
	#		print LINE
	#		print LINE #

	case "${1^^}" in
	RED)
		printf '\033[0;31m%s\033[0m\n' "${2}"
		;;
	YELLOW)
		printf '\e[33m%s\033[0m\n' "${2}"
		;;
	BLUE)
		printf '\e[33m%s\033[0m\n' "${2}"
		;;
	GREEN)
		printf '\e[0;32m%s\033[0m\n' "${2}"
		;;
	LINE)
		separator="-"										# separator default
		line="["											# adding to a "line" variable
		term_size="$(tput cols)"							# get number of columns
		if ([[ ! -z "$2" ]] && [[ "${#2}" == 1 ]]); then	# set custom the separator (length must be 1)
			separator="${2}"
		fi
		for ((i = 1; i <= "${term_size}-2"; i++)); do		# make the line
			line+="${separator}"
		done
		line+="]"
		printf "${line}"									# regurgitate to terminal
		;;
	*)
		printf '\033[0m%s\033[0m\n' "${1}"
		;;
	esac
}


###### "choice" element #####

choice_init() {

	# DESC: any and all flags go here for evaluation
	# ARGS: $@
	#       default flags (with sourcing)
	#       -f  force, skip all user interaction.  Implied 'Yes' to all actions.
	#       -q  Quiet (no output)
	#       -l  Print log to file
	#       -h  Display help, version and exit
	#       -s  set strict
	#       -v  verbose
	#       -d  run in debug-mode
	# OUTS: go for main

	# set any bools
	t=false

	# FLAGS ->                fqlhsvd
	while getopts ":s:u:p:n:thfqlhsvd" opt; do
		case "${opt}" in
		s) # in-choice-eval
			# both methods work. One is a little wordier
			s=${OPTARG}
			#1
			((s == 45 || s == 90)) || usage
			(("${OPTARG#*.}" == "service" || "${OPTARG#*.}" == "timer")) || usage
			#2
			if ([[ "${OPTARG#*.}" == "service" ]] || [[ "${OPTARG#*.}" == "timer" ]]); then
				s=${OPTARG}
			else
				usage
			fi
			;;
		e) # elements (to add to the file, like init but not unit-file, but also logging...)
			elements+=("${OPTARG}") # use array -> ARGS MUST BE -e <thing1> -e <thing2>
			;;
		#		f) # Felements -> # use single variable -> ARGS MUST BE -f "thing1 thing2" separated by space
		#			set -f 					# disable glob
		#            IFS=' ' 				# split on space characters#
		#			felements=($OPTARG) # use the split+glob operator#
		#			;;
		u) # user
			readonly u=${OPTARG}
			id -u "${u}" &&
				echo "success!" ||
				return "${ERROR_USER_UNKNOWN}"
			;;
		p) # password
			readonly p=${OPTARG}
			if [[ -z "${OPTARG}" ]]; then
				echo -e "no value provided for password!"
				usage
			fi
			echo "-p was triggered, Parameter: $OPTARG" >&2
			;;
		n) # string input
			readonly n=${OPTARG}
			;;
		t) # boolean. set to false before choice loop...
			readonly t=true
			;;
		h) # usage output
			usage
			;;
		f) # force -> this seems a bit difficult / or needs to be handled with care.
			# anytime "read" or sudo command occurs, i will need to pass the thngy provided
			# read is probably easy, but needs to be incorporated into the script then
			# sudo, hm. i will need to look at that one....
			f=${OPTARG}
			;;
		q) # quiet
			q=${OPTARG}
			;;
		# debugging options
		d) # debug
			debug=1
			flags_init ${debug}
			;;
		v) # verbose
			verbose=1
			flags_init ${verbose}
			;;
		s) # strict
			strict=1
			flags_init ${strict}
			;;
		l) # log output to script
			l=${OPTARG}
			;;

		#p) -> pid would be something...
		\?)
			echo "Invalid option: $OPTARG" 1>&2
			;;
		:)
			# If no argument is provided getopts will set opt to :.
			# recognize this error condition by catching the : case
			# and printing an appropriate error message.
			echo "Invalid option: $OPTARG requires an argument" 1>&2
			;;

		*)
			echo -e "in *)...\nThis happens, if a flag i spassed that is defined, yet no case..in is available for it"
			;;
		esac
	done

	shift $((OPTIND - 1))
}

choice_check() {

	# DESC: null-checks inputs provided to choice_init
	# ARGS: $@: Arguments set in choice_init
	# OUTS: go for main / usage if not
	# TODO: check if we can get a list of the flags
	#       sed the file for getopts flags, maybe..
	#       otherwise its a manual set everytime. probably better

	# multiple check
	# if [ -z "${s}" ] || [ -z "${p}" ] || [ -z "${m}" ]; then
	# single check
	if [[ -z "${n}" ]]; then
		echo -e "${RED}You must provide this and that!${NOC}
        "
		usage
		exit 0
	fi
}

choice_is_valid() {

	# DESC: validity-checks inputs provided to choice_init
	# ARGS: $@: Arguments set in choice_init
	# OUTS: VALID / INVALID flags

	local name="${name}"
	[[ ${name} =~ ^[a-zA-Z0-9_.\-]{1,255}$ ]] && echo "VALID" || echo "INVALID"
}

###### "log" element #####

log_init() {

	# DESC: Generic logging initialisation
	#		logging to /var/log/>script_name>
	# ARGS: script name
	#		user name
	# OUTS: log file creation

	# we cut of the extension
	local log_file="/var/log/${script_name%%.*}.log"

	# create the file if it doesnt exit
	if [[ ! -f "${log_file}" ]]; then
		sudo touch "${log_file}"
		if [[ $(stat -c '%U' "${log_file}") == "root" ]]; then
			sudo chown $(id -un).$(id -un) "${log_file}"
			sudo chmod 644 "${log_file}"
			exec &>${log_file}
		fi
	fi
	# log stuff
	exec &>>${log_file}
}

main() {

	# DESC: the core function of the script
	# ARGS: $@: Arguments provided to the script
	# OUTS: Magic!

	print YELLOW "first we check choices"

	local test="declared testvar"

	print "${script_name}"
	print YELLOW "within main"
}

trap script_finish EXIT INT TERM
log_init
flags_init
script_init

choice_init "${@}"

# meek it rein
main "${@}"


# download the package

# make a dir
mkdir ~/ORCL
mv <package.zip> ~/ORCL

# edit hosts / hostname files

# commands to get FQDN
# get the dns part
dnsdomainname
ping <hostname>

sudo nano /etc/hosts

 > 127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
 > ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
 > 
 > # for ORCL
 > 192.168.204.170 HankScorpio HankScorpio.corp.optitool.de

sudo nano /etc/hostname

 > HankScorpio.corp.optitool.de

# edit sysctl to add kernel parameters
touch /etc/sysctl.d/98-oracle.conf

 > fs.file-max = 6815744
 > kernel.sem = 250 32000 100 128
 > kernel.shmmni = 4096
 > kernel.shmall = 1073741824
 > kernel.shmmax = 4398046511104
 > kernel.panic_on_oops = 1
 > net.core.rmem_default = 262144
 > net.core.rmem_max = 4194304
 > net.core.wmem_default = 262144
 > net.core.wmem_max = 1048576
 > net.ipv4.conf.all.rp_filter = 2
 > net.ipv4.conf.default.rp_filter = 2
 > fs.aio-max-nr = 1048576
 > net.ipv4.ip_local_port_range = 9000 65500

# change kernel params
sudo /sbin/sysctl -p