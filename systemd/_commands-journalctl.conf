# get the unfiltered log, starting with oldest entry
journalctl

# reverse this list
journalctl --reverse 
journalctl -r

# follow the log as it is being written
journalctl --follow
journalctl -f

# select number of lines
journalctl --lines=10
journalctl -n 10

# time frame selection 
journalctl --since "1 hour ago"
journalctl --since "2018-05-04 20:00:00" --until "20 minutes ago"

# a specifc unit
 journalctl --since "2018-05-04 20:00:00" --until "20 minutes ago" --unit=postgresql.service
journalctl --unit=httpd.service --unit=postgresql.service

# show logs from specified boot with -b -<number>
journalctl -b -1 -u httpd.service

# log of specified process id
journalctl _PID=19487 --since yesterday

# log of specific user (using id)
journalctl _UID=107

# format the output -> list of options on man pages (mostly time specific stuff, json,...)
journalctl --output=short-precise
journalctl --output=json
journalctl --output=verbose

# the verbose option returns all these field names!
# this does not display for some reason
journalctl --output-fields="_UID","_GID" --unit borg-backup.service 

# search for pattern
journalctl --grep=/etc/hosts
journalctl -g /etc/hosts

# lists all boots in the journal
 journalctl --list-boots

# display kernel messages
journalctl -k

# display all log entries generated by a file, (usually an executable like bash)
journalctl /usr/bin/bash
journalctl /usr/bin/dbus-daemon

# by priority:
0: emerg
1: alert
2: crit
3: err
4: warning
5: notice
6: info
7: debug
journalctl --priority=3

# specify range
journalctl --priority=0..4

# manage log
# verify integrity
journalctl --verify

# get size on disk
journalctl --disk-usage

# remove old entries
# delete files until the disk space they use falls below the specified size
sudo journalctl --vacuum-size=50M  

# delete files so that all journal files contain no data older than the specified timespan
sudo journalctl --vacuum-time=1years

# delete files so that no more than the specified number of separate journal files remain in storage location
sudo journalctl --vacuum-files=4  

# writing to the log
# configure as service using systemd -> unit files

# manually echo something to the log using
echo 'manually placed error message (with prio 2) using systemd-cat' | systemd-cat -p 2